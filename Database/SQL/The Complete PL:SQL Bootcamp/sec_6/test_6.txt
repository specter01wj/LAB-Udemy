set serveroutput on;

--What are Control Structures & IF Statements

declare
  v_num number := 15;
  v_name varchar2(30) := 'James';
  --v_num number := null;
begin
  if v_num < 10 then
    dbms_output.put_line('Smaller than 10!');
  elsif v_num < 20 and v_name = 'James' then
    dbms_output.put_line('Smaller than 20!');
  elsif v_num < 30 then
    dbms_output.put_line('Smaller than 30!');
  else
      dbms_output.put_line('Greater than 30!');
  end if;
end;

  
--Case Expressions

declare
  v_job_code varchar2(10) := 'SA_MAN';
  v_salary_incr number;
begin
  v_salary_incr := case v_job_code
      when 'SA_MAN' then 0.2
      when 'SA_REP' then 0.3
      else 0
      end;
  dbms_output.put_line('Your salary increase: ' || v_salary_incr);
end;

declare
  v_job_code varchar2(10) := 'IT_PROG';
  v_department varchar2(10) := 'IT';
  v_salary_increase number;
begin
  v_salary_increase := case  
    when v_job_code = 'SA_MAN' then 0.2
    when v_department = 'IT' and v_job_code = 'IT_PROG' then 0.3
    else 0
  end;
  dbms_output.put_line('Your salary increase is : '|| v_salary_increase);
end;

declare
  v_job_code varchar2(10) := 'IT_PROG';
  v_department varchar2(10) := 'IT';
  v_salary_increase number;
begin
  case  
    when v_job_code = 'SA_MAN' then 
      v_salary_increase := 0.2;
      dbms_output.put_line('The salary increase for a Sales Manager is : '|| v_salary_increase);
    when v_department = 'IT' and v_job_code = 'IT_PROG' then 
      v_salary_increase := 0.3;
      dbms_output.put_line('The salary increase for a Sales Manager is : '|| v_salary_increase);
    else 
      v_salary_increase := 0;
      dbms_output.put_line('The salary increase for this job code is : '|| v_salary_increase);
  end CASE;
end;


--Basic Loops

declare
  v_counter number(2) := 1;
begin
  loop
    dbms_output.put_line('Counter is: ' || v_counter);
    v_counter := v_counter + 1;
    /*if v_counter = 10 then
      exit;
    end if;*/
    exit when v_counter = 10;
  end loop;
end;


--While Loops

declare
  v_counter number(2) := 1;
begin
  loop
    dbms_output.put_line('Counter is: ' || v_counter);
    v_counter := v_counter + 1;
    /*if v_counter = 10 then
      exit;
    end if;*/
    exit when v_counter = 10;
  end loop;
end;


--For Loops

begin
  for i in reverse 1..3 loop
    dbms_output.put_line('My counter is: ' || i);
  end loop;
end;


--Nested Loops & Loop Labeling

declare
  v_inner number := 1;
begin
  for v_outer in 5..10 loop
    dbms_output.put_line('My outer value is: ' || v_outer);
    v_inner := 1;
    loop
      v_inner := v_inner + 1;
      dbms_output.put_line('  My inner val is: ' || v_inner);
      exit when v_inner * v_outer >= 15;
    end loop;
  end loop;
end;


declare
  v_inner number := 1;
begin
<<outer_loop>>
  for v_outer in 5..10 loop
    dbms_output.put_line('My outer value is: ' || v_outer);
    v_inner := 1;
    <<inner_loop>>
    loop
      v_inner := v_inner + 1;
      dbms_output.put_line('  My inner val is: ' || v_inner);
      exit outer_loop when v_inner * v_outer >= 16;
      exit when v_inner * v_outer >= 15;
    end loop inner_loop;
  end loop outer_loop;
end;


--Continue Statement

declare
  v_inner number := 1;
begin
  for v_outer in 1..10 loop
    dbms_output.put_line('Outer -> ' || v_outer);
    v_inner := 1;
      while v_inner * v_outer < 15 loop
        v_inner := v_inner + 1;
        continue when mod(v_inner * v_outer, 3) = 0;
        dbms_output.put_line('Inner: ' || v_inner);
      end loop;
  end loop;
end;


declare
  v_inner number := 1;
begin
  <<outer_loop>>
  for v_outer in 1..10 loop
    dbms_output.put_line('Outer -> ' || v_outer);
    v_inner := 1;
    <<inner_loop>>
      loop
        v_inner := v_inner + 1;
        continue outer_loop when mod(v_inner * v_outer, 3) = 0;
        dbms_output.put_line('Inner: ' || v_inner);
      end loop inner_loop;
  end loop outer_loop;
end;


--GOTO Statement











